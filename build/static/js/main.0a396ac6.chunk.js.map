{"version":3,"sources":["components/Text/index.tsx","components/Link/index.tsx","components/CommandLine/index.tsx","components/Page/index.tsx","components/HomePage/data.ts","components/HomePage/index.tsx","components/AboutPage/data.ts","components/AboutPage/index.tsx","components/PortfolioPage/data.ts","components/PortfolioPage/Projects/opensecrets.ts","components/PortfolioPage/index.tsx","components/App/index.tsx","registerServiceWorker.ts","index.tsx"],"names":["Text","text","Link","href","indexOf","title","target","rel","to","startsWithCD","theString","startsWith","CommandLineWithRouter","withRouter","matches","history","useState","value","setValue","className","onSubmit","event","preventDefault","findFunction","object","command","generateFindFunction","substr","toLowerCase","potentialMatch","find","url","window","open","push","type","autoFocus","innerWidth","onChange","currentTarget","onKeyDown","keyCode","currentCommand","forEach","match","style","display","Page","linkComponents","commandMatches","links","textComponents","map","theText","index","link","data","commands","HomePage","AboutPage","opensecrets","PortfolioPage","location","Route","exact","path","render","App","component","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0a396ac6.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport interface Props {\n    text: string;\n}\n\nconst Text = ({ text }: Props) => {\n    return (\n        <p>{text}</p>\n    );\n};\n\nexport default Text;","import * as React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nimport './Link.css';\n\nexport interface Props {\n    text: string;\n    href: string;\n}\n\nconst Link = ({ text, href }: Props) => {\n    if (href.indexOf('http') > -1) {\n        return (\n            <p><a href={href} title={text} target=\"_blank\" rel=\"noreferrer\">{text}</a></p>\n        );\n    } else {\n        return (\n            <p><RouterLink to={href} title={text}>{text}</RouterLink></p>\n        );\n    }\n\n};\n\nexport default Link;","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { History } from 'history';\n\nimport './CommandLine.css';\nimport { useState } from 'react';\n\ninterface Props extends RouteComponentProps<any> {\n    matches: {\n        command: string,\n        url: string\n    }[];\n    history: History;\n}\n\nconst startsWithCD = (theString: string): boolean => {\n    return theString.startsWith('cd ');\n}\n\nconst generateFindFunction = (value: string) => {\n    return function (object: { command: string, url: string }) {\n        return object.command === value;\n    };\n}\n\nconst CommandLine = ({matches, history}: Props) => {\n    const [value, setValue] = useState('');\n\n    const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n        setValue(event.currentTarget.value);\n    }\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.keyCode === 9) {\n            event.preventDefault();\n            const currentCommand = startsWithCD(value) ? value.substr(3) : value;\n            matches.forEach((match) => {\n                if (match.command.startsWith(currentCommand.toLowerCase())) {\n                    setValue(match.command);\n                }\n            });\n        }\n    }\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n\n        event.preventDefault();\n\n        const submitValue = startsWithCD(value) ? value.substr(3).toLowerCase() : value.toLowerCase();\n\n        const findFunction = generateFindFunction(submitValue);\n\n        const potentialMatch = matches.find(findFunction);\n\n        if (potentialMatch) {\n            if (potentialMatch.url.indexOf('http') > -1) {\n                window.open(potentialMatch.url);\n                setValue('');\n            } else {\n                if (history) {\n                    history.push(potentialMatch.url);\n                }\n            }\n        }\n\n    }\n\n    return (\n        <form className=\"command-line\" onSubmit={handleSubmit}>\n            <span>\n                <input\n                    type=\"text\"\n                    autoFocus={window.innerWidth > 1024}\n                    value={value}\n                    onChange={handleChange}\n                    onKeyDown={handleKeyDown}\n                />\n            </span>\n            <input type=\"submit\" style={{ display: 'none' }} />\n        </form>\n    );\n}\n\nexport const CommandLineWithRouter = withRouter(CommandLine);","import * as React from 'react';\n\nimport Text from '../Text';\nimport Link from '../Link';\nimport { CommandLineWithRouter } from '../CommandLine';\n\nimport './Page.css';\n\nexport interface Props {\n    text: string[];\n    commandMatches: {\n        command: string,\n        url: string\n    }[];\n    links?: {\n        text: string,\n        href: string\n    }[];\n}\n\nconst Page = ({ text, commandMatches, links }: Props) => {\n    const textComponents = text.map((theText, index) => { return <Text text={theText} key={index} />; });\n    let linkComponents;\n    if (links) {\n        linkComponents = links.map((link, index) => { return <Link text={link.text} href={link.href} key={index} />; });\n    }\n\n    if (linkComponents) {\n        return (\n            <div>\n                {textComponents}\n                <div className=\"link-container\">\n                    {linkComponents}\n                </div>\n                <CommandLineWithRouter matches={commandMatches} />\n            </div>\n        );\n    }\n    return (\n        <div>\n            {textComponents}\n            <CommandLineWithRouter matches={commandMatches} />\n        </div>\n    );\n};\n\nexport default Page;","const data = {\n    text: [\n        `Hi, I'm Kia Farhang, a software developer in Austin, Texas currently working for DataStax.`,\n        `You can navigate this site using the links below - or, if you'd like, use the command line at the bottom of the screen.`,\n        `Type the name of the page you'd like to visit. \n        To access the \"about\" page, type \"about\" and press enter.`,\n        `\"../\" will take you up one level.`,\n        `If you'd rather just see my resume, click the 'resume' link below.`\n    ],\n    links: [\n        { text: 'about', href: 'about' },\n        { text: 'portfolio', href: 'portfolio' },\n        { text: 'resume', href: 'https://github.com/KiaFarhang/ts-portfolio/blob/master/kia-farhang-resume.pdf' }\n    ],\n    commands: [\n        { command: 'about', url: 'about' },\n        { command: 'portfolio', url: 'portfolio' },\n        { command: 'resume', url: 'https://github.com/KiaFarhang/ts-portfolio/blob/master/kia-farhang-resume.pdf' }\n    ]\n};\n\nexport default data;","import * as React from 'react';\n\nimport Page from '../Page';\n\nimport data from './data';\n\nconst HomePage = () => {\n    return (\n        <Page text={data.text} links={data.links} commandMatches={data.commands} />\n    );\n};\n\nexport default HomePage;","const data = {\n    text: [\n        `I grew up in Minnesota, where I studied journalism in college.`,\n        `That took me to Southern California, where I started coding and eventually switched careers.`,\n        `I prefer back-end, test-driven development whenever possible.`,\n        `Outside of work, I enjoy reading, writing fiction (it's bad), playing video games and taking bike rides.`\n    ],\n    links: [\n        { text: 'home', href: '' },\n        { text: 'portfolio', href: 'portfolio' },\n        { text: 'resume', href: 'https://github.com/KiaFarhang/ts-portfolio/blob/master/kia-farhang-resume.pdf' },\n        { text: 'linkedin', href: 'https://www.linkedin.com/in/kia-farhang-68423966/' }\n\n    ],\n    commands: [\n        { command: '../', url: '../' },\n        { command: 'home', url: '' },\n        { command: 'portfolio', url: 'portfolio' },\n        { command: 'resume', url: 'https://github.com/KiaFarhang/ts-portfolio/blob/master/kia-farhang-resume.pdf' },\n        { command: 'linkedin', url: 'https://www.linkedin.com/in/kia-farhang-68423966/' }\n    ]\n};\n\nexport default data;","import * as React from 'react';\n\nimport Page from '../Page';\n\nimport data from './data';\n\nconst AboutPage = () => {\n    return (\n        <Page text={data.text} links={data.links} commandMatches={data.commands} />\n    );\n};\n\nexport default AboutPage;","const data = {\n    text: [\n        `Here are a few of my recent projects.`,\n        `You can also use the \"github\" command to open my GitHub profile.`\n    ],\n    links: [\n        { text: 'home', href: '' },\n        { text: 'about', href: 'about' },\n        { text: 'github', href: 'https://github.com/kiafarhang' },\n        { text: 'opensecrets', href: 'portfolio/opensecrets'}\n    ],\n    commands: [\n        { command: '../', url: '../' },\n        { command: 'home', url: '' },\n        { command: 'about', url: 'about' },\n        { command: 'github', url: 'https://github.com/kiafarhang' },\n        { command: 'opensecrets', url: 'portfolio/opensecrets' },\n    ]\n};\n\nexport default data;","const opensecrets = {\n    text: [\n        `This is a Go client for the OpenSecrets federal campaign finance REST API.`,\n        `It handles firing requests and marshalling the (pretty ugly/nested) JSON response into nice structs users\n        can work with.`,\n        `I mostly wrote it to get some experience with Go.`,\n    ],\n    links: [\n        { text: 'portfolio', href: '../portfolio' },\n        { text: 'repo', href: 'https://github.com/sa-express-news/UIL-bracket-17' }\n\n    ],\n    commands: [\n        { command: '../', url: '../portfolio' },\n        { command: 'portfolio', url: '../portfolio' },\n        { command: 'repo', url: 'https://github.com/KiaFarhang/opensecrets' },\n    ]\n}\n\nexport default opensecrets;","import * as React from 'react';\n\nimport Page from '../Page';\n\nimport data from './data';\n\nimport opensecrets from './Projects/opensecrets';\n\nimport { RouteComponentProps, Route } from 'react-router-dom';\n\nconst PortfolioPage = ({ match, location, history }: RouteComponentProps<{}>) => {\n    return (\n        <div>\n            <Route exact={true} path={match.url} render={() => <Page text={data.text} links={data.links} commandMatches={data.commands} />} />\n            <Route path={`${match.url}/opensecrets`} render={() => <Page text={opensecrets.text} links={opensecrets.links} commandMatches={opensecrets.commands} />} />\n        </div>\n    );\n};\n\nexport default PortfolioPage;","import * as React from 'react';\nimport {\n  HashRouter as Router,\n  Route\n} from 'react-router-dom';\n\nimport HomePage from '../HomePage';\nimport AboutPage from '../AboutPage';\nimport PortfolioPage from '../PortfolioPage';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Route exact={true} path=\"/\" component={HomePage} />\n        <Route path=\"/about\" component={AboutPage} />\n        <Route path=\"/portfolio\" component={PortfolioPage} />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('node') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}